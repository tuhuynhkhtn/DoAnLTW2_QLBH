@using MVCQLBH.Models
@using BotDetect.Web.Mvc

@model UserRegisting

@section style{
    <link href="@BotDetect.Web.CaptchaUrls.Absolute.LayoutStyleSheetUrl" rel="stylesheet" type="text/css" />
    <link href="~/Content/css/bootstrap-datepicker3.min.css" rel="stylesheet" />
    <style type="text/css">
        .error {
            color: red;
            font-weight: bold !important;
        }

        label {
            font-weight: normal !important;
        }
    </style>
}

@section script{
    <script src="~/Content/js/jquery.validate.min.js"></script>
    <script src="~/Content/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/js/spin.min.js"></script>
    <script type="text/javascript">
        $('.datepicker').datepicker({
            //format: 'mm/dd/yyyy',
            format: 'd/m/yyyy',
            autoclose: true
        });

        //$("#frmRegister").validate({
        //    rules: {
        //        Username: "required",
        //        Password: {
        //            required: true,
        //            minlength: 4
        //        },
        //        //PasswordRetype: "required",
        //        PasswordRetype: {
        //            equalTo: "#Password"
        //        },
        //        Name: "required",
        //        //Email: "required",
        //        Email: {
        //            required: true,
        //            email: true
        //        },
        //        DOB: "required",
        //    },
        //    messages: {
        //        Username: "Cần nhập tên đăng nhập",
        //        Password: {
        //            required: "Cần nhập mật khẩu",
        //            minlength: "Mật khẩu ít nhất 4 kí tự"
        //        },
        //        PasswordRetype: "Nhập lại chưa khớp",
        //        Name: "Vui lòng nhập tên",
        //        //Email: "Cần nhập email",
        //        Email: {
        //            required: "Vui lòng nhập email",
        //            email: "Email chưa hợp lệ"
        //        },
        //        DOB: "Cần nhập ngày sinh",
        //    }
        //});

        var opts = {
            lines: 13 // The number of lines to draw
        , length: 28 // The length of each line
        , width: 14 // The line thickness
        , radius: 49 // The radius of the inner circle
        , scale: 0.75 // Scales overall size of the spinner
        , corners: 1 // Corner roundness (0..1)
        , color: '#000' // #rgb or #rrggbb or array of colors
        , opacity: 0.15 // Opacity of the lines
        , rotate: 0 // The rotation offset
        , direction: 1 // 1: clockwise, -1: counterclockwise
        , speed: 0.5 // Rounds per second
        , trail: 56 // Afterglow percentage
        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9 // The z-index (defaults to 2000000000)
        , className: 'spinner' // The CSS class to assign to the spinner
        , top: '100%' // Top position relative to parent
        , left: '20%' // Left position relative to parent
        , shadow: false // Whether to render a shadow
        , hwaccel: false // Whether to use hardware acceleration
        , position: 'absolute' // Element positioning
        }
        var target = document.getElementById('foo')
        var spinner = new Spinner(opts).spin(target);

        $('#fmRegister').on('submit', function (e) {
            e.preventDefault(); // để hiển thị ra json
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),

                beforeSend: function () {
                    var target = $('#errorPasswordRetype');
                    var spinner = new Spinner(opts).spin()
                    target.append(spinner.el);
                },
                success: function (data) {
                    //Note: Check null or no
                    if (data.ErrorUsername != null || data.ErrorPassword != null || data.ErrorPasswordRetype != null || data.ErrorName != null || data.ErrorEmail != null || data.ErrorDOB != null || data.ErrorCaptcha != null) {
                        //Change captcha
                        $('#CaptchaCode').val("");
                        $('#ExampleCaptcha_ReloadLink').click();

                        //Username
                        if (data.ErrorUsername != null) {
                            var tg = $('#errorUsername');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorUsername + "</p>");
                        }
                        else {
                            var tg = $('#errorUsername');
                            tg.empty();
                        }

                        //Password
                        if (data.ErrorPassword != null) {
                            var tg = $('#errorPassword');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorPassword + "</p>");
                        }
                        else {
                            var tg = $('#errorPassword');
                            tg.empty();
                        }

                        //PasswordRetype
                        if (data.ErrorPasswordRetype != null) {
                            var tg = $('#errorPasswordRetype');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorPasswordRetype + "</p>");
                        }
                        else {
                            var tg = $('#errorPasswordRetype');
                            tg.empty();
                        }

                        //Name
                        if (data.ErrorName != null) {
                            var tg = $('#errorName');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorName + "</p>");
                        }
                        else {
                            var tg = $('#errorName');
                            tg.empty();
                        }

                        //Email
                        if (data.ErrorEmail != null) {
                            var tg = $('#errorEmail');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorEmail + "</p>");
                        }
                        else {
                            var tg = $('#errorEmail');
                            tg.empty();
                        }

                        //DOB
                        if (data.ErrorDOB != null) {
                            var tg = $('#errorDOB');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorDOB + "</p>");
                        }
                        else {
                            var tg = $('#errorDOB');
                            tg.empty();
                        }
                        //Captcha
                        if (data.ErrorCaptcha != null) {
                            var tg = $('#errorCaptcha');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorCaptcha + "</p>");
                        }
                        else {
                            var tg = $('#errorCaptcha');
                            tg.empty();
                        }
                    }
                    else {
                        //alert("Ðang ky´ tha`nh công");
                        window.location = "@Url.Action("Index", "Home")";
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus);
                }

            });
        });
    </script>

}

@section ContentHeader{
    Đăng ký tài khoản
}

<div class="row">
    @using (Html.BeginForm("AjaxRegister", "Account", FormMethod.Post, new { @class = "form-horizontal", id = "fmRegister" }))
    {
        <div class="form-group">
            @Html.LabelFor(m => m.Username, "Tên đăng nhập", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "Tên đăng nhập", id = "txtUsername" })
            </div>
            <div class="col-sm-offset-3 col-sm-9" id="errorUsername">
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, "Mật khẩu ", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", minlength = 4, placeholder = "Mật khẩu" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorPassword"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PasswordRetype, "Nhập lại mật khẩu", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.PasswordFor(m => m.PasswordRetype, new { @class = "form-control", placeholder = "Nhập lại" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorPasswordRetype"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Username, "Họ tên", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Họ tên" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorName"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Email, "Email", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email", type = "email" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorEmail"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DOB, "Ngày sinh", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.DOB, new { @class = "form-control datepicker", placeholder = "d/m/yyy" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorDOB"></p>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-9" id="cap">
                @{ MvcCaptcha exampleCaptcha = new MvcCaptcha("ExampleCaptcha"); }
                @Html.Captcha(exampleCaptcha)
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-3 control-label" for="CaptchaCode">Capcha</label>
            <div class="col-sm-6">
                @Html.TextBox("CaptchaCode")
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorCaptcha"></p>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-6">
                <button type="submit" id="btnSubmit" class="btn btn-success">Đăng ký</button>
                @*<a class="btn btn-success" id="btnSubmit" href="javascript:void">Đăng ký</a>*@
            </div>
        </div>
                    }
</div>
