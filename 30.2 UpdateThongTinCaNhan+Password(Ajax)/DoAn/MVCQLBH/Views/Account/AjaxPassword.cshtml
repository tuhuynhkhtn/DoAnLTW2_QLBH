@using MVCQLBH.Models
@using BotDetect.Web.Mvc

@model UserInfo

@section style{
    <link href="@BotDetect.Web.CaptchaUrls.Absolute.LayoutStyleSheetUrl" rel="stylesheet" type="text/css" />
    <link href="~/Content/css/bootstrap-datepicker3.min.css" rel="stylesheet" />
    <style type="text/css">
        .error {
            color: red;
        }
        label {
            font-weight: normal !important;
        }
    </style>
}

@section script{
    <script src="~/Content/js/jquery.validate.min.js"></script>
    <script src="~/Content/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/js/spin.min.js"></script>
    <script type="text/javascript">
        $('.datepicker').datepicker({
            //format: 'mm/dd/yyyy',
            format: 'd/m/yyyy',
            autoclose: true
        });

        var opts = {
            lines: 13 // The number of lines to draw
        , length: 28 // The length of each line
        , width: 14 // The line thickness
        , radius: 49 // The radius of the inner circle
        , scale: 0.75 // Scales overall size of the spinner
        , corners: 1 // Corner roundness (0..1)
        , color: '#000' // #rgb or #rrggbb or array of colors
        , opacity: 0.15 // Opacity of the lines
        , rotate: 0 // The rotation offset
        , direction: 1 // 1: clockwise, -1: counterclockwise
        , speed: 0.5 // Rounds per second
        , trail: 56 // Afterglow percentage
        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9 // The z-index (defaults to 2000000000)
        , className: 'spinner' // The CSS class to assign to the spinner
        , top: '100%' // Top position relative to parent
        , left: '20%' // Left position relative to parent
        , shadow: false // Whether to render a shadow
        , hwaccel: false // Whether to use hardware acceleration
        , position: 'absolute' // Element positioning
        }
        var target = document.getElementById('foo')
        var spinner = new Spinner(opts).spin(target);

        $('#fmPassword').on('submit', function (e) {
            e.preventDefault(); // để hiển thị ra json
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),

                beforeSend: function () {
                    var target = $('#errorPasswordOld');
                    var spinner = new Spinner(opts).spin()
                    target.append(spinner.el);

                    //empty alter
                    var targetAlter = $('#alert');
                    targetAlter.empty();

                },
                success: function (data) {
                    //Note: Check null or no
                    if (data.ErrorPasswordOld != null || data.ErrorPasswordNew != null || data.ErrorPasswordRetype != null) {

                        //PasswordOld
                        if (data.ErrorPasswordOld != null) {
                            var tg = $('#errorPasswordOld');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorPasswordOld + "</p>");
                        }
                        else {
                            var tg = $('#errorPasswordOld');
                            tg.empty();
                        }

                        //PasswordNew
                        if (data.ErrorPasswordNew != null) {
                            var tg = $('#errorPasswordNew');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorPasswordNew + "</p>");
                        }
                        else {
                            var tg = $('#errorPasswordNew');
                            tg.empty();
                        }

                        //PasswordRetype
                        if (data.ErrorPasswordRetype != null) {
                            var tg = $('#errorPasswordRetype');
                            tg.empty();
                            tg.append("<p class='error'>" + data.ErrorPasswordRetype + "</p>");
                        }
                        else {
                            var tg = $('#errorPasswordRetype');
                            tg.empty();
                        }

                    }
                    else {
                        //spin
                        var target = $('#errorPasswordOld');
                        target.empty();

                        //alert("Cập nhật mật khẩu thành công");
                        //Them class vao button de Modal hien len
                        var htmlAlert = 
                            '<div class="alert alert-success"> ' + 
                                '<strong>Cập nhật mật khẩu thành công!</strong>' + 
                            '</div>';

                        var tgAlert = $('#alert');
                        tgAlert.empty();
                        tgAlert.append(htmlAlert);

                        window.setTimeout(Reset, 1500);

                        function Reset() {
                            window.location = "@Url.Action("AjaxPassword", "Account")";
                        }
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus);
                }

            });
        });
    </script>

}

@section ContentHeader{
    Đổi mật khẩu
}

<div id="alert">

</div>


<div class="row">
    @using (Html.BeginForm("AjaxPassword", "Account", FormMethod.Post, new { @class = "form-horizontal", id = "fmPassword" }))
    {
        <div class="form-group">
            @Html.HiddenFor(m => m.UserID)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, "Mật khẩu hiện tại ", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", minlength = 4, placeholder = "Mật khẩu hiện tại" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorPasswordOld"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PasswordNew, "Mật khẩu mới ", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.PasswordFor(m => m.PasswordNew, new { @class = "form-control", minlength = 4, placeholder = "Mật khẩu mới" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorPasswordNew"></p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PasswordRetype, "Nhập lại mật khẩu", new { @class = "col-sm-3 control-label" })
            <div class="col-sm-6">
                @Html.PasswordFor(m => m.PasswordRetype, new { @class = "form-control", placeholder = "Nhập lại" })
            </div>
            <div class="col-sm-offset-3 col-sm-9">
                <p class="error" id="errorPasswordRetype"></p>
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-6">
                <button type="submit" id="btnSubmit" class="btn btn-success"><i class="fa fa-check"></i> Đổi mật khẩu</button>
                @*<a class="btn btn-success" id="btnSubmit" href="javascript:void">Đăng ký</a>*@
            </div>
        </div>
                    }
</div>
